// Code generated by go-bindata.
// sources:
// template/backend.tpl
// template/init.tpl
// template/varnish.tpl
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateBackendTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8e\x41\x8a\x83\x40\x10\x45\xf7\x9e\xe2\xe3\x01\x7a\x60\x86\x59\x0d\x1e\x60\x36\xc1\x1b\x88\xad\x95\xd8\x44\xbb\xa4\xbb\x8c\x04\xe9\xbb\x87\xea\xc4\x10\x92\x5d\xf1\xde\xff\xfc\xb2\x6d\x77\x26\xdf\x63\xdb\x60\x0e\xed\x44\x48\x09\x5b\x01\x98\x81\xa3\xa0\x42\xa9\xe2\xbf\x46\x4a\xe5\x9f\xe2\x99\xc3\x13\xd7\x7a\xef\xa2\x63\xef\xa9\x93\x46\xdc\x44\xbc\x68\xe6\x3b\x66\x71\x74\x21\x4a\x63\xaf\x42\x2f\xee\xf7\xee\x2c\xc9\x4a\xe4\xb3\x8d\x9f\xd5\x39\xb0\x25\x54\xf9\x21\xc0\x2c\x61\xd4\xe9\xaf\xd9\xf9\x53\x1e\x05\x8c\xf3\x42\xe1\xd2\xaa\xf8\x89\x0f\xf6\x3e\x03\x98\xd5\xf9\x9e\x57\x25\x7b\x66\x08\x14\x07\x1e\x7b\x2d\x2a\x4b\x45\x2a\x6e\x01\x00\x00\xff\xff\x9b\x42\xf3\x5e\x0d\x01\x00\x00")

func templateBackendTplBytes() ([]byte, error) {
	return bindataRead(
		_templateBackendTpl,
		"template/backend.tpl",
	)
}

func templateBackendTpl() (*asset, error) {
	bytes, err := templateBackendTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/backend.tpl", size: 269, mode: os.FileMode(493), modTime: time.Unix(1487751476, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateInitTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x2e\x4d\x52\x28\x4b\xce\x89\xcf\xcc\xcb\x2c\x51\xa8\xe6\xb2\x51\xb5\x55\x48\xc9\x2c\x4a\x4d\x2e\xc9\x2f\x2a\x56\x50\xb5\xe3\xaa\x05\x04\x00\x00\xff\xff\xcb\xc2\x9a\x27\x21\x00\x00\x00")

func templateInitTplBytes() ([]byte, error) {
	return bindataRead(
		_templateInitTpl,
		"template/init.tpl",
	)
}

func templateInitTpl() (*asset, error) {
	bytes, err := templateInitTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/init.tpl", size: 33, mode: os.FileMode(493), modTime: time.Unix(1486675510, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateVarnishTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\xdb\x72\x1b\xc7\xd1\xbe\xc7\x53\xb4\x17\x45\x19\x4b\xe1\x44\x5a\xf6\xff\x97\x21\xd0\x45\x43\x90\xc9\xaa\x14\xc9\x12\x21\x39\xae\x30\xc5\x1a\xec\x36\xb0\x23\x2e\x66\xd6\x73\x00\x04\x93\x54\xe5\x3e\x95\xab\xe4\x0d\xf2\x0c\xb9\xc9\xfb\xd8\xcf\x91\xea\xd9\x23\xb0\x00\x99\xa4\xc2\x0b\x09\x3b\x3d\xfd\x4d\x4f\x1f\xbf\x69\xc2\x92\x29\xc1\x75\x04\x4b\x54\x9a\x4b\x01\xaf\x0f\x86\xc5\xda\xc1\x09\x34\x96\x41\x0c\xaf\xba\xfd\x41\x83\x2f\x12\xa9\x0c\x68\x13\x16\xbf\x43\xae\x30\x30\x52\xe9\x41\xa3\xd1\x84\x29\x0b\xee\x50\x84\xa0\x0d\x53\xa6\x41\x38\xd9\xca\x48\x8a\x19\x9f\xc3\xc1\x49\x65\x13\x8a\xb0\xd1\x68\x34\xab\x7f\x8d\x26\x9c\x49\xab\xf1\x0e\x31\xe1\x62\x4e\x90\x5c\x70\x53\xc1\xa3\xcf\x2a\x98\x13\x3b\x24\x6d\xa7\xb0\x0c\xe2\xdb\x19\x17\x1c\xee\x1b\x00\x0a\x8d\x55\x02\x5a\xf2\xce\x1f\x34\x1e\xb7\x4e\xfa\xef\xff\x1a\x4d\x18\xc5\x1c\x85\x01\xcd\x43\x6c\x94\x07\x2b\x0c\x96\xee\xe0\x80\xc5\x31\x04\x56\x1b\xb9\xb8\x0d\x8c\x8a\x07\x8d\x06\x40\xef\x10\x7e\x44\x08\x25\x08\x69\x40\xdb\xc4\x79\xef\xfa\xea\xcd\x4f\x20\x15\x9c\x4d\x26\x57\xbd\xe3\x6e\x1f\x0e\x7b\x0d\x00\x3e\x83\x96\xc2\x9f\xbb\x0b\x34\x91\x0c\x61\x38\x04\xef\xea\xdd\xb9\xe7\x3b\xf0\xf2\x5e\x7a\x2d\x4c\xd4\x7a\xd5\xff\xda\xf7\x07\x0d\x80\xc7\x8a\xa6\x42\xe7\x31\x4d\xba\xfd\x5c\xaf\x77\x08\x1a\x0d\xfc\xbe\xf3\x56\xaa\x15\x53\x21\x86\xf4\x2b\x3d\xb2\x54\x8d\x8c\x49\xba\x5b\x7b\x72\x04\x70\x00\xfb\x76\xc1\x70\xbf\xe8\x25\x78\x6d\xf0\xe0\x25\x04\xce\x75\x5d\x9e\x0c\x1c\xe2\x23\x60\xac\xf1\xdf\x85\xdf\x56\xae\x5e\xeb\x03\x67\x3b\xaf\xf2\x81\xb3\x3d\xe6\x93\xc6\x70\xf3\xd3\x99\x49\x69\x26\xd8\x02\xe1\xe0\xc4\x7b\xde\xca\x14\xc5\xdb\xa1\xe4\xfe\x7d\x7d\xe0\xcc\xc9\xcb\xe9\x64\x08\x5f\x7e\xfd\xa5\x0f\xf7\x94\xbd\x35\x2c\x17\x34\x0c\x4f\x0d\x0c\xa9\xc8\xba\x86\x2f\xf0\x58\x21\x8b\x5b\x42\xae\xda\xd0\xef\xf6\xfd\x41\x8e\xfa\x98\x22\x3c\x36\x1a\x59\x76\x15\xb5\x87\xb1\xab\x48\xf2\x06\x59\x95\x7e\x97\x35\x53\x4f\xb0\x2f\x86\xe0\xfd\x30\x9e\x78\xf0\xe2\x45\x96\x60\x1b\xa2\xb3\xf1\xe9\x9b\x7d\xb2\xab\xf7\x7b\xd5\xae\x2e\xaf\xf7\xca\x26\xef\x4e\x47\xe3\x7d\xc2\xcb\xab\xc9\xf9\xe5\xc5\xf5\x3e\xf1\x9b\xf1\xef\xc6\x93\xb1\x57\x06\xb5\x77\x08\x17\x52\x74\xde\xbd\x1d\x1d\x7f\x73\xf4\x0d\x95\xd3\xe8\xf2\xe2\x62\x3c\x9a\xc0\x2a\xe2\x41\x04\x5c\xc3\x0a\xb9\x0a\xbb\x79\x7e\x94\x25\x94\xf0\x04\xb3\xe2\x49\x9d\x78\xbe\x48\x62\x5c\xa0\x30\x5c\xcc\x61\x85\x53\x2d\x83\x3b\x2c\xeb\xb5\x45\x61\xd2\xdf\xf6\x7a\xab\xd5\xaa\x9b\xc5\xb4\x13\xb0\x20\xc2\xae\x54\xf3\x5e\x28\x03\xdd\x7b\xd5\xed\xf7\xac\x46\xa5\x3b\x73\xcb\x43\xec\x2d\x83\xb8\x83\x9f\x18\x01\x77\x0a\x44\xdd\x8d\xcc\x22\xf6\x37\xeb\xdd\xe5\xc0\xfb\x64\xae\x58\x88\xf0\x19\xbc\xd6\x77\xdc\x2f\x34\x6a\xe5\x5f\xb5\xfd\xc9\x98\xee\x8c\x67\xa5\x29\xfc\x88\x20\x45\xbc\x86\x10\x59\x0c\x2b\x6e\x22\xf8\x61\x3c\x01\x26\x42\xa0\x9d\x30\x25\xc9\x8c\xd9\xd8\xe4\xfe\x2b\x2c\x60\x5a\x6f\x78\xef\x42\x1a\x70\xde\x60\xd3\x18\x77\xdc\xed\xd4\x9a\x48\x2a\xfe\x0b\x33\x5c\x8a\xda\x7d\x36\xd0\x9a\x20\x64\x8a\x45\xe6\x5b\xd4\xc6\x81\x95\x58\x23\x92\x75\x46\x52\x18\x25\x63\xd7\x23\x85\x4c\x43\xe1\xc1\xc3\x83\xbb\xb3\x55\x31\xb9\xf1\xe6\x3b\xb7\x3c\x9c\xb1\x58\xd7\x84\x2f\xaa\x32\xff\x69\x8b\xae\xa9\xbc\xae\xad\x52\x72\xce\x0c\x76\x46\x2c\x61\x53\x1e\x73\xb3\x86\x08\x59\x88\x4a\x83\x91\xc0\x84\x90\x56\x04\x08\xe3\xeb\xf3\x22\x6f\x8c\xcc\xcb\xd3\x01\x6d\x14\xfd\x4e\xc0\x21\x78\x77\xb8\x1e\x8e\xaf\xcf\x7b\x47\xdd\xbe\x37\x48\x0d\xd0\x0e\x2b\x42\xf8\xd9\xa2\x5a\x83\x36\x8a\x86\x64\xd9\x44\xe8\x4e\x69\xe7\x70\x1b\x68\x7b\x2b\x5b\xf7\x1d\x44\x7e\xb3\x88\xe9\x28\x1d\x8a\xc5\xf4\xa2\x74\x72\x11\x69\xc2\xf7\x65\xc4\x47\x52\x08\x0c\x28\x5c\xdf\x42\x10\x4b\x8d\x54\x4d\x74\x9c\x14\x40\x53\x8e\xb4\xc2\x3c\x42\xba\x4d\x17\xd5\x46\x26\x0e\x26\x28\x74\x41\xa1\xd5\x08\x33\x25\x17\xa0\x51\x84\x54\x5c\x33\x6b\xac\x2a\x82\xab\x33\x22\x11\xaf\x09\xc2\x44\xe8\x10\x5a\x89\x34\x54\x8b\x2c\x8e\xd7\x3e\xac\x94\x14\xf3\xdc\x8f\x5d\x38\x9f\xc1\x5a\x5a\x9a\xa8\x2b\x26\xc8\x2d\xdc\xf9\x3f\x62\x49\x82\xa2\xed\x64\x01\x13\x60\x45\x28\x1d\x18\x37\x10\xa1\xc2\xae\xfb\xb0\x82\x2e\x31\xc5\x22\x0a\xa5\xb1\x83\xed\xac\xb5\x69\x45\xe6\xf9\xba\xa5\x98\x49\xab\x93\x24\x5b\xca\x87\xf2\x56\xc1\x6e\x38\x9d\x69\xbd\xc1\x55\x66\x68\x82\xed\xc8\x50\xb0\x68\x0f\xfd\x7f\x1b\x32\xc3\x2a\x31\xdd\x32\x35\x92\xda\xe4\x76\x6e\x6e\x2f\xc5\xce\xac\xea\x40\x2b\x37\x6a\x54\x4b\x54\x5d\x9e\xf8\xdb\xb6\xc7\x52\xde\xd9\x64\xdb\x7a\xab\xe6\xb8\x61\x7e\x4a\x49\x8e\xfb\xfd\x36\x78\x57\x24\x0d\x3d\x7f\xfb\x36\xdc\x38\x15\xb2\x5b\x4e\x3f\x76\x8d\x89\xe1\x04\xfa\x3a\x37\xbb\x09\xa7\x90\x50\x66\x58\xc1\x42\x1b\x1b\x54\x18\x42\xc4\x4d\x1b\x42\x8c\xf9\x12\x15\x70\xb3\x51\xa5\xd9\x72\x61\x72\x49\x30\xb9\xa6\xc2\x8c\x4d\xb4\xce\xce\xa3\xca\xc8\x56\x9c\x53\xb2\x8d\xb7\x11\x17\xc6\x2f\x0d\xa0\x08\x53\x95\x69\xc3\x62\xcc\x18\x45\x61\xeb\x4b\x57\x5f\xa1\x55\xae\x89\x39\x48\x2e\x0c\xce\x51\xb5\x14\xce\xb5\x9d\xba\x9d\xf5\x16\xd5\x06\xef\x0f\x37\xfa\xe6\xfa\x8f\x87\x8b\x8e\x03\x1e\xb6\x6e\x42\xff\x65\xb6\x46\xec\xe8\xe6\xc8\xf3\x53\xf6\xe1\xe4\x70\x70\xe2\x13\x21\xd1\xde\xe6\xa2\xf6\x53\x7f\xdd\x6f\xcd\xb2\xaa\x1f\x52\x4f\x64\x51\xae\x7a\xfa\x25\xd0\xaf\xb9\x62\x01\x6e\x79\xfd\x72\xfa\x11\x03\x43\x3e\xe3\x02\xdc\x86\x9a\xc7\x9b\x70\x6a\x8d\x5c\x30\xc3\x89\xe1\xae\xc1\x28\x3e\x9f\x53\xdb\x63\xce\xe5\x73\x25\xad\x08\xc1\xa5\xf0\x13\x11\x72\x21\x72\x9b\xe0\x45\x71\x82\xa4\x8e\xb9\x42\x98\x67\xae\x57\xa8\x6d\x6c\x2a\x99\xb5\xe0\xae\x17\x57\x33\x89\x96\x9e\x2d\x9e\xfc\x80\xb4\xb3\x9d\xb9\xe6\xa0\x61\x15\xa1\xa0\xe3\x22\xb6\x44\xd7\xc7\xe8\xcc\x84\x63\x80\xc4\x15\x40\x20\x86\x6d\x37\x01\x99\x42\x60\x53\x69\x5d\x0b\xa7\xd6\x55\xf4\x26\x85\x3a\x91\x42\x63\xd6\xaf\x72\x6e\x4a\x32\x27\xff\x29\xeb\x3f\xa1\x04\x16\x04\xd2\xa6\x94\x42\x2a\x58\xc8\x90\xcf\xd6\xf4\x41\x6a\x33\x2e\x58\x4c\x41\x21\xe7\xe7\xfd\x29\xed\xe7\x3a\xc9\x79\xf0\x19\x27\x2a\xef\x42\x17\x71\xa3\xc9\x8f\x4f\xf3\xca\x6d\x80\x0f\x19\x55\x79\xaf\xa9\x51\x09\xb9\x82\x8e\x4b\x63\xe2\x96\xc7\xc4\x32\x5b\xf9\x57\xab\x4e\x46\x53\xe2\xd9\x26\x35\x3f\x3b\x3a\x23\x9f\xf5\x00\x3b\x3a\xda\xcc\x1e\x3f\x34\x01\x28\xf5\x5d\x30\x2a\xef\x21\x17\x8b\x5f\xff\xfa\x97\x5f\xff\xf9\xb7\xac\x1a\x7f\xfb\xfb\x9f\x7e\xfb\xc7\x9f\xcb\x09\xef\x06\xd9\x10\xbc\x1e\xbd\x02\x37\xc7\x72\xd6\x63\xfe\xaf\x7f\x54\x7d\xf6\x6c\x6a\x65\x5e\xe9\x65\x0f\xda\x2d\xea\x54\x20\x1c\x3f\x8f\x60\x93\x90\x26\x73\xc4\xb5\x91\x6a\xbd\x0f\xe8\xab\x1c\xa8\x9a\x79\x4e\x98\xb5\xba\x96\x0b\x86\x36\xcc\x58\xf7\x26\x23\xeb\xb3\x69\x42\xbb\xd0\xf0\xa0\xe5\x25\x92\xee\x5a\xb4\xe7\x5d\x5a\xc7\x75\x2d\xf7\x58\xcf\x1e\xee\x07\x27\xcf\xe8\x7f\xb5\x5b\x3f\xbd\xe5\x59\x7a\xc9\x12\xa5\x96\x48\x5b\x9c\xcb\x51\x2e\xd2\x41\x4a\x8e\x94\x7c\xb5\x61\x61\xb5\xe9\x28\x5c\xb2\x98\x13\x6a\x1b\x16\xec\x53\x87\xcd\x71\xd8\x77\x0f\xa3\x02\x31\xb7\x0b\x8e\xfb\xfd\x41\xfd\x28\x29\x68\xf4\x77\x26\xeb\x84\x52\xd6\x33\xf8\xc9\xf4\x92\x98\x71\x31\x80\x20\x62\x4a\xa3\x19\x5a\x33\xeb\xfc\xbf\x03\xdd\x9d\x88\xff\xbb\x07\xff\xf7\xd9\x44\x79\xeb\x7a\x5b\x11\xe2\x7c\x7e\xa4\xdd\xec\xfe\xd9\xb2\x24\x51\x4a\x1d\x2a\x4f\x7b\x62\xe9\x79\x5e\x55\x69\xc9\x54\x86\xeb\x3c\x0c\xf5\x92\xab\xf6\xba\x9a\x3d\x45\x6f\xba\xdf\x38\xd4\x8a\x82\x9c\x6f\x93\xef\xfa\x10\xcd\xba\x70\x8a\x43\xb6\xd0\x68\xa0\x28\xb4\xa9\xa5\xcd\x7f\xe1\x09\xb4\x3e\xda\x70\x8e\xf4\x40\x28\x36\xa6\x44\x18\xaa\xd1\xf3\x2b\x36\xec\x8c\xee\xe7\x34\xba\x8e\x99\x3f\xb5\x89\x25\x49\xcc\x03\x37\x76\x7b\x1f\xd9\x92\xe9\x40\xf1\xe4\x3f\x54\xd3\x95\x6e\x90\xbb\x5a\x27\xdd\x50\xde\xba\x1b\x0d\xc1\x28\x8b\x95\x39\x35\xa1\x16\x2d\xe3\x58\xae\xa8\x61\xeb\x00\x05\x53\x5c\xa6\x14\xb8\xe2\xce\xcd\x2b\xd2\xa0\x7d\x3d\x84\xbe\x86\x87\x07\x77\x52\xd5\xbc\x6b\x34\x9d\x91\x94\x77\x1c\x77\x4a\xcb\xc7\x40\x56\x65\x9f\xcb\x2a\xf3\x72\x8d\xd6\x17\x4f\xeb\x64\x0f\xe7\x4d\xe8\xcd\xe2\xfd\x5c\xbe\x97\x1e\x72\xfc\x87\x44\xf1\x25\x33\xe8\xf9\xbb\x4c\xfb\xc0\xd4\xda\x25\xec\x61\xde\x90\x9b\x70\xc6\x4d\xe7\xad\x54\x9d\x2b\xa6\xf5\xb6\x4f\x2b\xee\xa9\xf8\x75\x63\x0b\x39\x6a\x08\x47\xc7\x7d\x5d\x13\xa5\x14\x85\x9c\x38\x78\x8e\x4b\x5c\x31\x7a\x5c\xd0\x73\x2b\x7b\x4c\xb8\xc9\xad\x70\x21\x97\x08\x75\xe7\xa4\x29\xba\x23\x29\x77\xfa\x3e\x7f\x81\xd5\x2b\x74\xaf\x5a\xed\x2e\xa1\xbc\x45\xcd\xb7\x93\x6b\x57\xcf\xfa\x57\x00\x00\x00\xff\xff\x99\x0f\x7b\x00\x8c\x15\x00\x00")

func templateVarnishTplBytes() ([]byte, error) {
	return bindataRead(
		_templateVarnishTpl,
		"template/varnish.tpl",
	)
}

func templateVarnishTpl() (*asset, error) {
	bytes, err := templateVarnishTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/varnish.tpl", size: 5516, mode: os.FileMode(493), modTime: time.Unix(1486675510, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/backend.tpl": templateBackendTpl,
	"template/init.tpl": templateInitTpl,
	"template/varnish.tpl": templateVarnishTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"backend.tpl": &bintree{templateBackendTpl, map[string]*bintree{}},
		"init.tpl": &bintree{templateInitTpl, map[string]*bintree{}},
		"varnish.tpl": &bintree{templateVarnishTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

