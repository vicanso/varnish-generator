// Code generated by go-bindata.
// sources:
// template/backend.tpl
// template/init.tpl
// template/varnish.tpl
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateBackendTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8e\x41\x8a\x83\x40\x10\x45\xf7\x9e\xe2\xe3\x01\x7a\x60\x86\x59\x0d\x1e\x60\x36\xc1\x1b\x88\xad\x95\xd8\x44\xbb\xa4\xbb\x8c\x04\xe9\xbb\x87\xea\xc4\x10\x92\x5d\xf1\xde\xff\xfc\xb2\x6d\x77\x26\xdf\x63\xdb\x60\x0e\xed\x44\x48\x09\x5b\x01\x98\x81\xa3\xa0\x42\xa9\xe2\xbf\x46\x4a\xe5\x9f\xe2\x99\xc3\x13\xd7\x7a\xef\xa2\x63\xef\xa9\x93\x46\xdc\x44\xbc\x68\xe6\x3b\x66\x71\x74\x21\x4a\x63\xaf\x42\x2f\xee\xf7\xee\x2c\xc9\x4a\xe4\xb3\x8d\x9f\xd5\x39\xb0\x25\x54\xf9\x21\xc0\x2c\x61\xd4\xe9\xaf\xd9\xf9\x53\x1e\x05\x8c\xf3\x42\xe1\xd2\xaa\xf8\x89\x0f\xf6\x3e\x03\x98\xd5\xf9\x9e\x57\x25\x7b\x66\x08\x14\x07\x1e\x7b\x2d\x2a\x4b\x45\x2a\x6e\x01\x00\x00\xff\xff\x9b\x42\xf3\x5e\x0d\x01\x00\x00")

func templateBackendTplBytes() ([]byte, error) {
	return bindataRead(
		_templateBackendTpl,
		"template/backend.tpl",
	)
}

func templateBackendTpl() (*asset, error) {
	bytes, err := templateBackendTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/backend.tpl", size: 269, mode: os.FileMode(493), modTime: time.Unix(1487809708, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateInitTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x2e\x4d\x52\x28\x4b\xce\x89\xcf\xcc\xcb\x2c\x51\xa8\xe6\xaa\xae\x56\xd0\x73\xc9\x2c\x4a\x4d\x2e\xc9\x2f\x2a\x56\xa8\xad\xe5\xaa\xe5\x02\x04\x00\x00\xff\xff\x78\x5f\x19\x98\x22\x00\x00\x00")

func templateInitTplBytes() ([]byte, error) {
	return bindataRead(
		_templateInitTpl,
		"template/init.tpl",
	)
}

func templateInitTpl() (*asset, error) {
	bytes, err := templateInitTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/init.tpl", size: 34, mode: os.FileMode(493), modTime: time.Unix(1487901981, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateVarnishTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xcd\x8e\x1b\xc7\x11\xbe\xf3\x29\xca\x43\x40\x20\x57\xe4\x70\xb4\x50\x9c\xc4\x0c\x6d\xac\xa9\x95\x77\x81\x60\xb5\x10\x29\x39\x46\x14\x2c\x9a\x33\xc5\x99\xd6\x0e\xbb\xc7\xdd\x3d\xa4\x68\x2e\x85\xdc\x83\x9c\x92\x37\xc8\x33\xe4\x92\xf7\xb1\x9f\x23\xa8\x9e\xff\x21\xb9\xb2\x93\x1c\xa2\x8b\x96\x5d\x5d\x5f\x57\x57\x75\x55\x7d\x35\x5d\x58\x33\x25\xb8\x8e\x60\x8d\x4a\x73\x29\x60\xb7\x73\xdf\x66\x4b\xfb\x7d\x67\xed\xc7\xf0\xdc\xf5\xc6\x1d\xbe\x4a\xa4\x32\xa0\x4d\x50\xfe\x1d\x70\x85\xbe\x91\x4a\x8f\x3b\x9d\x2e\x2c\x98\x7f\x8f\x22\x00\x6d\x98\x32\x9d\xdd\xce\xfd\x3a\x5b\x98\x4a\xb1\xe4\xe1\x7e\x5f\xdb\x82\x22\xe8\x74\x3a\xdd\xfa\xbf\x4e\x17\xae\x64\xaa\xf1\x1e\x31\xe1\x22\x24\x40\x2e\xb8\xa9\xd0\xae\x05\x37\x35\x28\x2b\xb4\x38\x3a\x5d\xc0\xda\x8f\xef\x96\x5c\x70\xd8\x75\x00\x14\x9a\x54\x09\xe8\xc9\xfb\xfe\xb8\xb3\x6f\x9d\xf3\x9f\xff\xeb\x74\x61\x1a\x73\x14\x06\x34\x0f\xb0\x53\x1d\xac\xd0\x5f\xdb\x83\x7d\x16\xc7\xe0\xa7\xda\xc8\xd5\x9d\x6f\x54\x3c\xee\x74\x00\x46\x67\xf0\x2d\x42\x20\x41\x48\x03\x3a\x4d\xac\xe7\x66\xb7\x2f\xbe\x03\xa9\xe0\x6a\x3e\xbf\x1d\x9d\xbb\x1e\x9c\x8d\x3a\x00\x7c\x09\x3d\x85\xdf\xbb\x2b\x34\x91\x0c\x60\x32\x01\xe7\xf6\xf5\xb5\xd3\xb7\xe0\xd5\xbd\xf4\x56\x98\xa8\xf7\xdc\xfb\x55\xbf\x3f\xee\x00\xec\x6b\x9a\x0a\xad\xbf\x34\xe9\x7a\x85\xde\xe8\x0c\x34\x1a\xf8\xc3\xf0\xa5\x54\x1b\xa6\x02\x0c\xe8\xaf\xec\xc8\x4a\x35\x32\x26\x71\x5b\x7b\x0a\x04\xb0\x00\xa7\x76\xc1\xe4\xb4\xe8\x29\x38\x03\x70\xe0\x29\xf8\xd6\x75\x2e\x4f\xc6\x16\x71\x0f\x18\x6b\xfc\xb9\xf0\x6d\xe5\xfa\xb5\xde\x72\x76\xf4\x2a\x6f\x39\x3b\x61\x3e\x69\x4c\x9a\x3f\xad\x99\xbb\x9d\x7b\xc3\x56\xb8\xdf\x3b\x9f\xb6\x31\xc3\x70\x0e\x54\x3a\x07\x3b\x6d\x40\x30\xb8\x30\x30\xa1\xe4\x71\x0d\x5f\xe1\xb9\x42\x16\xf7\x84\xdc\x0c\xc0\x73\xbd\x3c\x8a\x9d\xfc\xb5\x94\x79\x84\xb1\xcd\x2e\xba\xdd\x6e\xe7\xce\xec\xcf\x32\x03\x0e\x9f\xcb\x67\x13\x70\xbe\xb9\x9c\x3b\xf0\xe4\x49\xfe\x5c\x1a\xa2\xab\xcb\x8b\x17\xa7\x64\xb7\x6f\x4e\xaa\xdd\xbe\x9a\x9d\x94\xcd\x5f\x5f\x4c\x2f\x4f\x09\x5f\xdd\xce\xaf\x5f\xdd\xcc\x4e\x89\x5f\x5c\xfe\xfe\x72\x7e\xe9\x54\x21\x1a\x9d\xc1\x8d\x14\xc3\xd7\x2f\xa7\xe7\x9f\x3f\xfb\x9c\x92\x63\xfa\xea\xe6\xe6\x72\x3a\x87\x4d\xc4\xfd\x08\xb8\x86\x0d\x72\x15\xb8\x45\xb4\xab\x84\x48\x78\x82\x85\x13\x2d\xd0\xf5\x2a\x89\x71\x85\xc2\x70\x11\xc2\x06\x17\x5a\xfa\xf7\x58\x65\x5f\x8f\x02\xa3\xbf\x18\x8d\x36\x9b\x8d\x9b\x57\xbf\xa1\xcf\xfc\x08\x5d\xa9\xc2\x51\x20\x7d\x3d\x7a\xee\x7a\xa3\x54\xa3\xd2\xc3\x30\xe5\x01\x8e\xd6\x7e\x3c\xc4\x0f\x8c\x80\x87\x25\xa2\x76\x23\xb3\x8a\xfb\xcd\xec\xb5\x51\x7f\x93\x84\x8a\x05\x08\x1f\xc1\xe9\x7d\xc5\xfb\xa5\xc6\x41\x32\xd7\x6d\x7f\x34\xa6\x47\xe3\x59\x4b\xf1\x6f\x11\xa4\x88\xb7\x10\x20\x8b\x61\xc3\x4d\x04\xdf\x5c\xce\x81\x89\x00\x68\x27\x2c\x48\xb2\x64\x69\x6c\x0a\xff\x95\x16\x30\xad\x1b\xde\xbb\x91\x06\xac\x37\xd8\x22\xc6\x23\x77\xbb\x48\x4d\x24\x15\xff\x81\x19\x2e\xc5\xc1\x7d\x1a\x68\x5d\x10\x32\xc3\x22\xf3\x53\xd4\xc6\x82\x55\x58\x53\x92\x0d\xa7\x52\x18\x25\x63\x5b\xf1\x84\xcc\x42\xe1\xc0\xc3\x83\xbd\x73\xaa\x62\x72\xe3\xbb\xaf\xec\xf2\x64\xc9\x62\x7d\x20\x7c\x52\x97\xf5\x1f\xb7\x68\x46\xc9\x35\x4b\x95\x92\x21\x33\x38\x9c\xb2\x84\x2d\x78\xcc\xcd\x16\x22\x64\x01\x2a\x0d\x46\x02\x13\x42\xa6\xc2\x47\xb8\x9c\x5d\x97\xef\xc6\xc8\x22\x39\x2d\x50\x23\xcd\x8f\x02\x4e\xc0\xb9\xc7\xed\xe4\x72\x76\x3d\x7a\xe6\x7a\xce\x38\x33\x40\x5b\xac\x08\xe1\xfb\x14\xd5\x16\xb4\x51\xd4\xf0\xaa\xb2\x41\x77\xca\x6a\x85\xdd\x40\xdb\x7b\xf9\x7a\xdf\x42\x14\x37\x8b\x98\x8e\xb2\x16\x57\xf6\x22\x7a\x4e\x36\x22\x5d\xf8\xba\x8a\xf8\x54\x0a\x81\x3e\x85\xeb\x0b\xf0\x63\xa9\x91\xb2\x89\x8e\x93\x02\xa8\x67\x91\x56\x50\x44\x48\x0f\xe8\xa2\xda\xc8\xc4\xc2\xf8\xa5\x2e\x28\x4c\x35\xc2\x52\xc9\x15\x68\x14\x01\x25\xd7\x32\x35\xa9\x2a\x83\xab\x73\x4a\x10\x6f\x09\xc2\x44\x68\x11\x7a\x89\x34\x94\x8b\x2c\x8e\xb7\x7d\xd8\x28\x29\xc2\xc2\x8f\x2e\x5c\x2f\x61\x2b\x53\xea\x8f\x1b\x26\xc8\x2d\xdc\xfa\x3f\x62\x49\x82\x62\x60\x65\x3e\x13\x90\x8a\x40\x5a\x30\x6e\x20\x42\x85\xae\xfd\x91\x0a\xba\xc4\x02\xcb\x28\x54\xc6\x8e\xdb\xaf\x36\xcd\x32\xb2\x78\xaf\x2d\xc5\x5c\x5a\xef\x0b\xf9\x52\xd1\x62\x5b\x09\xdb\x70\x3a\xd3\xba\xc1\x3c\x96\x68\xfc\x76\x64\x28\x58\xb4\x87\xfe\xbf\x0b\x98\x61\xb5\x98\xb6\x4c\x8d\xa4\x36\x85\x9d\xcd\xed\x95\xd8\x9a\x55\x6f\x50\xd5\x46\x8d\x6a\x8d\xca\xe5\x49\xbf\x6d\x7b\x2c\xe5\x7d\x9a\xb4\xad\x4f\x55\x88\x0d\xf3\x33\x82\x71\xee\x79\x03\x70\x6e\x49\x1a\x38\xfd\xf6\x6d\xb8\xb1\x2a\x64\xb7\x5c\xbc\x77\x8d\x89\xe1\x4b\xf0\x74\x61\x76\x17\x2e\x20\xa1\x97\x91\x0a\x16\xa4\xb1\x41\x85\x01\x44\xdc\x0c\x20\xc0\x98\xaf\x51\x01\x37\x8d\x2c\xcd\x97\x4b\x93\x2b\xb2\xc8\x35\x25\x66\x6c\xa2\x6d\x7e\x1e\x65\x46\xbe\x62\x9d\x92\x6f\xbc\x8b\xb8\x30\xfd\xca\x00\x8a\x30\x65\x99\x36\x2c\xc6\x9c\x1f\x94\xb6\x3e\xb5\xf9\x15\xa4\xca\x16\x31\x0b\xc9\x85\xc1\x10\x55\x4f\x61\xa8\xd3\x85\xdd\x79\x58\xa2\x06\xe0\xfc\xf1\x9d\x7e\x37\xfb\xd3\xd9\x6a\x68\x81\x27\xbd\x77\x41\xff\x69\xbe\x46\x5c\xe7\xdd\x33\xa7\x6f\xb9\xc4\x8c\xc4\xfb\x7d\x9f\xc8\x85\x76\xea\x4b\xba\x9f\xf9\x6a\xd7\xea\x63\x75\x1f\x64\x5e\xc8\x23\x5c\xf7\xf2\x53\xa0\xbf\x42\xc5\x7c\x6c\x79\xfc\xd5\xe2\x3d\xfa\x86\xfc\xc5\x05\xd8\x0d\x07\xde\xee\xc2\x45\x6a\xe4\x8a\x19\x4e\x5c\x75\x0b\x46\xf1\x30\xa4\x92\xc7\xac\xbb\x43\x25\x53\x11\x80\x7d\xbe\x8f\x44\xc7\x86\xc7\x6e\x82\x27\xe5\x09\x92\xaa\xe5\x06\x21\xcc\xdd\xae\x50\xa7\xb1\xa9\xbd\xaa\x15\xb7\x75\xb8\xfe\x8a\x68\xe9\x93\x89\x53\x1c\x90\x55\xb5\x2b\x5b\x18\x34\x6c\x22\x14\x74\x5c\xc4\xd6\x68\x6b\x18\x9d\x99\x70\xf4\x91\x78\x02\x08\xc4\x60\x60\xbb\x1f\x53\x08\x6c\x21\x53\x5b\xbe\xa9\x6c\x95\x75\x49\xa1\x4e\xa4\xd0\x98\xd7\xaa\x82\x65\x92\xcc\xca\xbf\xcb\x6b\x4f\x20\x81\xf9\xbe\x4c\x33\x3a\x21\x15\xac\x64\xc0\x97\x5b\xfa\x41\x6a\x4b\x2e\x58\x4c\x41\x21\xe7\x17\xb5\x29\xab\xe5\x3a\x29\x18\xed\x15\x27\x52\x6e\x43\x17\x71\xa3\xc7\x9d\x16\x4b\xcc\x59\xc8\x1b\x4d\x25\x48\xc8\x0d\x0c\xed\x03\x25\x9e\x78\x4e\x8c\xb1\x57\xfc\xea\x1d\x12\xcb\x8c\x44\x0e\x48\xad\x56\x4b\x8a\xb3\x67\xb6\x1a\x0c\xe7\x7c\xc5\x45\x58\x3c\x96\x22\x8d\x9a\x88\x95\x11\x03\x9a\x1e\xbe\xac\x46\x88\xf6\x85\x1a\xa0\xd4\xe6\x7e\x3b\x21\x92\xdf\xfb\x2f\x2c\xb7\x79\x32\xce\x07\xcf\x01\xa1\x9d\x38\xee\x11\x72\xfe\x88\x79\x9e\xeb\x79\xde\x2f\x80\x6f\x97\xd7\xff\x77\x8f\x3d\x36\xb3\xfc\x5c\xb7\xd4\x86\x98\x7a\xd7\xa8\x92\xdf\x0e\x29\xdd\x7c\xc4\x25\x66\x40\x25\xd1\x26\x6a\x6d\xea\xb5\x79\xfa\xe3\xdf\xfe\xfa\xe3\xbf\xfe\x9e\x57\xe9\x9f\xfe\xf1\xe7\x9f\xfe\xf9\x97\x8a\xf9\x59\x82\x33\x01\x67\x44\x93\x7e\x93\xae\xe5\xbd\xe7\xd7\xde\xb3\xfa\x70\xdb\xd4\xca\x9d\x3e\xca\xbf\x57\xb4\x28\x75\x89\x70\x5e\x20\xd4\x8b\x89\x15\xe6\x9d\x2b\x4b\x12\x6d\x98\x49\xed\xc0\x4c\x87\xe6\xe4\x80\x76\xa1\xe1\x7e\xcf\x49\x24\x99\x58\x76\xdb\x63\x5a\xe7\x87\x5a\xbb\x9d\xfb\x36\xb3\x6e\xbf\x77\xca\x8b\x34\xa3\xd1\xa2\xbe\x96\xf9\x6a\x23\x15\x52\x74\x33\x0e\x3c\x80\x55\xaa\xcd\x50\xe1\x9a\xc5\x3c\x60\x86\x16\xd8\x87\x21\x0b\x71\xe2\x39\xe3\x3a\x62\x61\x0f\x9c\x7b\xde\xf8\xf0\x28\x29\x88\x81\x0d\xe7\xdb\x84\xea\x8b\x63\xf0\x83\x19\x25\x31\xe3\x62\x0c\x7e\xc4\x94\x46\x33\x49\xcd\x72\xf8\x1b\x0b\x7a\x3c\xee\xff\xbb\xaf\x28\xf9\x77\x21\x78\x69\xdb\x4c\x19\x9a\xa2\x8d\x67\x8d\x85\x5c\xba\xdb\x51\xda\x09\x84\xe2\x7b\x14\x38\xcf\x1d\xd8\x17\x1f\x3c\x32\xfa\x56\xfb\x58\x42\x93\x52\xf1\x18\xea\xd4\x70\x21\x83\x6d\x11\x83\xdd\x0e\xe8\xec\xfd\xfe\x44\xd7\x39\x30\xa7\xec\x12\xbb\xc6\xb1\xa9\x28\x47\xa4\xf6\x08\x74\x48\x65\xf2\x7e\x98\xe1\x90\x35\xd4\xa4\x29\x08\x03\x6a\x2e\xe1\x0f\x3c\x81\xde\xfb\x34\x08\x91\xc6\xb4\x72\x63\x36\x8e\x40\x3d\x78\xfd\x9a\x0d\x47\x83\xfb\x31\x0b\xae\x9d\x8f\x1e\xdb\xc4\x92\x24\xe6\xbe\x25\x3f\xa3\xf7\x6c\xcd\xb4\xaf\x78\xf2\x0b\xd5\x74\x2d\xf7\x0a\x67\xeb\xc4\x0d\xe4\x9d\xbd\xd1\x04\x8c\x4a\xb1\xc6\x18\xe6\xd4\x2c\x65\x1c\xcb\x0d\x95\x1f\xed\xa3\x60\x8a\xcb\x6c\x10\xa9\xb9\xb3\x79\x45\xa2\x3c\xbf\x9b\x80\xa7\xe1\xe1\xc1\x9e\x54\x37\x6f\x86\x66\x38\x95\xf2\x9e\xe3\x51\x69\x35\x92\xe5\x49\xf6\xb1\x4a\x32\xa7\xd0\xe8\x7d\xf6\xb8\x4e\xfe\xf9\xa2\x09\xdd\xcc\xdd\x8f\xd5\xd4\xfa\x50\xe0\x3f\x24\x8a\xaf\x99\x41\xa7\x7f\xcc\xb4\xb7\x4c\x6d\xed\x93\x3d\x2b\xca\x5f\x17\xae\xb8\x19\xbe\x94\x6a\x78\xcb\xb4\x6e\xfb\xb4\xe6\x9e\x9a\x5f\x1b\x5b\xc8\x51\x13\x78\x76\xee\xe9\x03\x51\x46\x16\xc9\x89\xe3\x4f\xb1\xba\x5b\x46\x23\x1e\x0d\xbd\xf9\x48\x67\x39\x94\xc2\x95\x5c\x23\x1c\x3a\x27\x7b\xa2\x47\x1e\xe5\x51\xdf\x17\x73\xf0\x61\x8e\x9e\x54\x3b\xb8\x4b\x20\xef\x50\xf3\xf6\xe3\x3a\x56\xb2\xfe\x1d\x00\x00\xff\xff\x14\xa8\x2b\x9a\xd9\x16\x00\x00")

func templateVarnishTplBytes() ([]byte, error) {
	return bindataRead(
		_templateVarnishTpl,
		"template/varnish.tpl",
	)
}

func templateVarnishTpl() (*asset, error) {
	bytes, err := templateVarnishTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/varnish.tpl", size: 5849, mode: os.FileMode(493), modTime: time.Unix(1487906812, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/backend.tpl": templateBackendTpl,
	"template/init.tpl": templateInitTpl,
	"template/varnish.tpl": templateVarnishTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"backend.tpl": &bintree{templateBackendTpl, map[string]*bintree{}},
		"init.tpl": &bintree{templateInitTpl, map[string]*bintree{}},
		"varnish.tpl": &bintree{templateVarnishTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

