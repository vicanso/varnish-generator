// Code generated by go-bindata.
// sources:
// template/backend.tpl
// template/init.tpl
// template/varnish.tpl
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateBackendTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8e\x41\x8a\x83\x40\x10\x45\xf7\x9e\xe2\xe3\x01\x7a\x60\x86\x59\x0d\x1e\x60\x36\xc1\x1b\x88\xad\x95\xd8\x44\xbb\xa4\xbb\x8c\x04\xe9\xbb\x87\xea\xc4\x10\x92\x5d\xf1\xde\xff\xfc\xb2\x6d\x77\x26\xdf\x63\xdb\x60\x0e\xed\x44\x48\x09\x5b\x01\x98\x81\xa3\xa0\x42\xa9\xe2\xbf\x46\x4a\xe5\x9f\xe2\x99\xc3\x13\xd7\x7a\xef\xa2\x63\xef\xa9\x93\x46\xdc\x44\xbc\x68\xe6\x3b\x66\x71\x74\x21\x4a\x63\xaf\x42\x2f\xee\xf7\xee\x2c\xc9\x4a\xe4\xb3\x8d\x9f\xd5\x39\xb0\x25\x54\xf9\x21\xc0\x2c\x61\xd4\xe9\xaf\xd9\xf9\x53\x1e\x05\x8c\xf3\x42\xe1\xd2\xaa\xf8\x89\x0f\xf6\x3e\x03\x98\xd5\xf9\x9e\x57\x25\x7b\x66\x08\x14\x07\x1e\x7b\x2d\x2a\x4b\x45\x2a\x6e\x01\x00\x00\xff\xff\x9b\x42\xf3\x5e\x0d\x01\x00\x00")

func templateBackendTplBytes() ([]byte, error) {
	return bindataRead(
		_templateBackendTpl,
		"template/backend.tpl",
	)
}

func templateBackendTpl() (*asset, error) {
	bytes, err := templateBackendTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/backend.tpl", size: 269, mode: os.FileMode(493), modTime: time.Unix(1487809708, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateInitTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x2e\x4d\x52\x28\x4b\xce\x89\xcf\xcc\xcb\x2c\x51\xa8\xe6\xaa\xae\x56\xd0\x73\xc9\x2c\x4a\x4d\x2e\xc9\x2f\x2a\x56\xa8\xad\xe5\xaa\xe5\x02\x04\x00\x00\xff\xff\x78\x5f\x19\x98\x22\x00\x00\x00")

func templateInitTplBytes() ([]byte, error) {
	return bindataRead(
		_templateInitTpl,
		"template/init.tpl",
	)
}

func templateInitTpl() (*asset, error) {
	bytes, err := templateInitTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/init.tpl", size: 34, mode: os.FileMode(493), modTime: time.Unix(1487809912, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateVarnishTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\x5d\x6e\x1b\xc9\x11\x7e\x9f\x53\xd4\x0e\x01\x83\x23\x93\x43\x5a\x70\x36\xc1\x32\xcc\x42\x4b\xd3\x2b\x01\x81\x2c\x98\xb4\x37\x8b\x28\x10\x9a\x33\x45\x4e\x5b\xc3\xee\x71\xff\x90\xe6\x52\x34\xf2\x1e\xe4\x29\xb9\x41\xce\x90\x97\xdc\x67\xf7\x1c\x41\xf5\xfc\x70\x86\xa4\xe4\x24\x88\x1e\x76\x39\x5d\x5d\xd5\xd5\xf5\xf3\xd5\xd7\x6e\xc1\x8a\x29\xc1\x75\x02\x2b\x54\x9a\x4b\x01\xdb\x6d\xf8\x3e\x5f\xda\xed\xbc\x55\x94\xc2\xcb\xb0\x3f\xf0\xf8\x32\x93\xca\x80\x36\x71\xf5\x3b\xe6\x0a\x23\x23\x95\x1e\x78\x5e\x0b\x66\x2c\xba\x47\x11\x83\x36\x4c\x19\x6f\xbb\x0d\xbf\xcb\x17\x46\x52\xcc\xf9\x62\xb7\xab\x6d\x41\x11\x7b\x9e\xd7\xaa\xff\x79\x2d\xb8\x94\x56\xe3\x3d\x62\xc6\xc5\x82\x0c\x72\xc1\xcd\xde\xda\x95\xe0\xa6\x66\xca\x09\x9d\x1d\x6d\x67\xb0\x8a\xd2\xbb\x39\x17\x1c\xb6\x1e\x80\x42\x63\x95\x80\xb6\xbc\x0f\x06\xde\xee\xe0\x9c\xff\xfd\xcf\x6b\xc1\x28\xe5\x28\x0c\x68\x1e\xa3\xb7\x3f\x58\x61\xb4\x72\x07\x47\x2c\x4d\x21\xb2\xda\xc8\xe5\x5d\x64\x54\x3a\xf0\x3c\x80\xde\x19\xfc\x80\x10\x4b\x10\xd2\x80\xb6\x99\x8b\xdc\xe4\xe6\xd5\x8f\x20\x15\x5c\x4e\xa7\x37\xbd\xf3\xb0\x0f\x67\x3d\x0f\x80\xcf\xa1\xad\xf0\x63\xb8\x44\x93\xc8\x18\x86\x43\xf0\x6f\xde\x5e\xf9\x81\x33\xbe\xbf\x97\xde\x08\x93\xb4\x5f\xf6\x7f\x15\x04\x03\x0f\x60\x57\xd3\x54\xe8\xe2\xa5\x49\xb7\x5f\xea\xf5\xce\x40\xa3\x81\x3f\x74\x5f\x4b\xb5\x66\x2a\xc6\x98\x7e\xe5\x47\xee\x55\x13\x63\xb2\xf0\x60\x4f\x69\x01\x9c\x81\xc7\x76\xc1\xf0\x71\xd1\x73\xf0\x3b\xe0\xc3\x73\x88\x5c\xe8\x42\x9e\x0d\x9c\xc5\x1d\x60\xaa\xf1\x3f\x35\x7f\xa8\x5c\xbf\xd6\x7b\xce\x4e\x5e\xe5\x3d\x67\x8f\xb8\x4f\x1a\xc3\xe6\xa7\x73\x73\xbb\x0d\xaf\xd9\x12\x77\x3b\xff\xcb\x3e\xe6\x36\xfc\x23\x15\xf7\xdf\xed\x96\x5c\xc1\x8f\x50\xf6\x11\xbc\x84\x5d\x2e\x6a\x18\x71\xb9\xc2\xf8\xc2\xc0\x90\xfa\x2a\x34\x7c\x89\xe7\x0a\x59\xda\x16\x72\xdd\x81\x7e\xd8\x0f\x06\xa5\x41\x6a\x1b\x67\x63\xe7\x79\x45\x59\x55\x0d\x87\xa9\x6b\x43\x0a\xc3\x76\x1b\x4e\xdc\x67\xd5\x2a\xc7\x75\xf5\xd5\x10\xfc\xef\xc7\x53\x1f\x9e\x3d\x2b\xea\xaa\x21\xba\x1c\x5f\xbc\x7a\x4c\x76\xf3\xee\x51\xb5\x9b\x37\x93\x47\x65\xd3\xb7\x17\xa3\xf1\x63\xc2\x37\x37\xd3\xab\x37\xd7\x93\xc7\xc4\xaf\xc6\xbf\x1f\x4f\xc7\xfe\x3e\x97\xbd\x33\xb8\x96\xa2\xfb\xf6\xf5\xe8\xfc\xeb\x17\x5f\x53\x17\x8d\xde\x5c\x5f\x8f\x47\x53\x58\x27\x3c\x4a\x80\x6b\x58\x23\x57\x71\x58\x96\xc5\xbe\x73\x32\x9e\x61\xd1\x33\x79\x08\xaf\x96\x59\x8a\x4b\x14\x86\x8b\x05\xac\x71\xa6\x65\x74\x8f\xfb\x36\x6d\x53\x9a\xf4\x37\xbd\xde\x7a\xbd\x0e\x0b\x98\xec\x46\x2c\x4a\x30\x94\x6a\xd1\x8b\x65\xa4\x7b\x2f\xc3\x7e\xcf\x6a\x54\xba\xbb\xb0\x3c\xc6\xde\x2a\x4a\xbb\xf8\x89\x91\xe1\x6e\x65\x51\x87\x89\x59\xa6\x41\xb3\xcd\x5d\x0d\xbc\xcb\x16\x8a\xc5\x08\x9f\xc1\x6f\x7f\xcb\x83\x4a\xe3\xa8\xeb\xeb\xbe\x3f\x99\xd3\x93\xf9\xac\x61\xc1\x0f\x08\x52\xa4\x1b\x88\x91\xa5\xb0\xe6\x26\x81\xef\xc7\x53\x60\x22\x06\xda\x09\x33\x92\xcc\x99\x4d\x4d\x19\xbf\xca\x03\xa6\x75\x23\x7a\xd7\xd2\x80\x8b\x06\x9b\xa5\x78\xe2\x6e\x17\xd6\x24\x52\xf1\x9f\x98\xe1\x52\x1c\xdd\xa7\x61\xad\x05\x42\xe6\xb6\xc8\x7d\x8b\xda\x38\x63\x7b\x5b\x23\x92\x75\x47\x52\x18\x25\x53\x07\x8d\x42\xe6\xa9\xf0\xe1\xe1\xc1\xdd\xd9\xaa\x94\xc2\x78\xfb\xad\x5b\x1e\xce\x59\xaa\x8f\x84\xcf\xea\xb2\xe0\x69\x8f\x26\xd4\x5c\x13\xab\x94\x5c\x30\x83\xdd\x11\xcb\xd8\x8c\xa7\xdc\x6c\x20\x41\x16\xa3\xd2\x60\x24\x30\x21\xa4\x15\x11\xc2\x78\x72\x55\xd5\x8d\x91\x65\x73\x3a\x43\x8d\xa6\x3f\x69\x70\x08\xfe\x3d\x6e\x86\xe3\xc9\x55\xef\x45\xd8\xf7\x07\xb9\x03\xda\xd9\x4a\x10\x3e\x5a\x54\x1b\xd0\x46\xd1\x64\xdc\x83\x08\xdd\x29\x47\x0e\xb7\x81\xb6\xb7\x8b\xf5\xc0\x99\x28\x6f\x96\x30\x9d\xe4\xb3\xb0\x1a\x5a\x54\x4e\x2e\x23\x2d\xf8\x6e\x9f\xf1\x91\x14\x02\x23\x4a\xd7\x37\x10\xa5\x52\x23\x75\x13\x1d\x27\x05\xd0\x70\x23\xad\xb8\xcc\x90\xee\xd0\x45\xb5\x91\x99\x33\x13\x55\xba\xa0\xd0\x6a\x84\xb9\x92\x4b\xd0\x28\x62\x6a\xae\xb9\x35\x56\x55\xc9\xd5\x05\x77\x48\x37\x64\xc2\x24\xe8\x2c\xb4\x33\x69\xa8\x17\x59\x9a\x6e\x02\x58\x2b\x29\x16\x65\x1c\x43\xb8\x9a\xc3\x46\x5a\x1a\xa4\x6b\x26\x28\x2c\xdc\xc5\x3f\x61\x59\x86\xa2\xe3\x64\x11\x13\x60\x45\x2c\x9d\x31\x6e\x20\x41\x85\xa1\xfb\xb0\x82\x2e\x31\xc3\x2a\x0b\x7b\x67\x07\x87\x55\x6b\xf3\x8e\x2c\xeb\xf5\x40\xb1\x90\xd6\x07\x48\xb1\x54\xce\xe2\x83\x86\x6d\x04\x9d\x69\xdd\xa0\x28\x73\x34\xd1\x61\x66\x28\x59\xb4\x87\xfe\x7f\x17\x33\xc3\x6a\x39\x3d\x70\x35\x91\xda\x94\x7e\x36\xb7\xef\xc5\xce\xad\xfa\x24\xdb\x6f\xd4\xa8\x56\xa8\x42\x9e\x05\x87\xbe\xa7\x52\xde\xdb\xec\xd0\x7b\xab\x16\xd8\x70\x3f\x67\x22\xe7\xfd\x7e\x07\xfc\x1b\x92\xc6\x7e\x70\x78\x1b\x6e\x9c\x0a\xf9\x2d\x67\x1f\x42\x63\x52\xf8\x1d\xf4\x75\xe9\x76\x0b\x2e\x20\xa3\xca\xb0\x82\xc5\x36\x35\xa8\x30\x86\x84\x9b\x0e\xc4\x98\xf2\x15\x2a\xe0\xa6\xd1\xa5\xc5\x72\xe5\xf2\x9e\x55\x72\x4d\x8d\x99\x9a\x64\x53\x9c\x47\x9d\x51\xac\xb8\xa0\x14\x1b\xef\x12\x2e\x4c\xb0\x77\x80\x32\x4c\x5d\xa6\x0d\x4b\xb1\x20\x12\x95\xaf\xcf\x5d\x7f\xc5\x56\x39\x10\x73\x26\xb9\x30\xb8\x40\xd5\x56\xb8\xd0\x76\xe6\x76\x1e\x43\x54\x07\xfc\x3f\xde\xea\xdb\xc9\x9f\xce\x96\x5d\x67\x78\xd8\xbe\x8d\x83\xe7\xc5\x1a\x91\xa2\xdb\x17\x7e\xe0\x48\xc7\x84\xc4\xbb\x5d\x40\x2c\x44\xfb\xf5\x25\x1d\xe4\xb1\xda\x1e\xcc\xb1\x7a\x0c\xf2\x28\x14\x19\xae\x47\xf9\x39\xd0\xaf\x85\x62\x11\x1e\x44\xfc\xcd\xec\x03\x46\x86\xe2\xc5\x05\xb8\x0d\x47\xd1\x6e\xc1\x85\x35\x72\xc9\x0c\x27\x52\xbb\x01\xa3\xf8\x62\x41\x90\xc7\x5c\xb8\x17\x4a\x5a\x11\x83\x2b\xdf\x27\xb2\xe3\xd2\xe3\x36\xc1\xb3\xea\x04\x49\x68\xb9\x46\x58\x14\x61\x57\xa8\x6d\x6a\x6a\x55\xb5\xe4\x0e\x87\xeb\x55\x44\x4b\x5f\x6c\x9c\xf2\x80\x1c\xd5\x2e\x1d\x30\x68\x58\x27\x28\xe8\xb8\x84\xad\xd0\x61\x18\x9d\x99\x71\x8c\x90\x78\x02\x08\xc4\xb8\xe3\xa6\x1f\x53\x08\x6c\x26\xad\x83\x6f\x82\xad\x0a\x97\x14\xea\x4c\x0a\x8d\x05\x56\x95\x74\x94\x64\x4e\xfe\x63\x81\x3d\xb1\x04\x16\x45\xd2\xe6\x74\x42\x2a\x58\xca\x98\xcf\x37\xf4\x41\x6a\x73\x2e\x58\x4a\x49\xa1\xe0\x97\xd8\x94\x63\xb9\xce\x4a\xea\x7b\xc9\x89\xbd\xbb\xd4\x25\xdc\x68\x8a\xe3\x76\x9b\x73\xdb\x13\x84\xf2\x50\xbb\x10\x77\xdf\x69\x42\x28\x21\xd7\xd0\x75\xf5\x4b\xa4\xf2\x9c\xe8\x65\xbb\xfc\x6a\x1f\xb3\xd0\x9c\x71\x76\x48\x2d\x28\xce\xad\x58\xe7\x71\x7e\x1d\x0f\x6d\x15\xcf\x1d\x02\x7f\xaa\x7a\x97\x8b\xda\x0b\xc8\xa5\xe2\xe7\xbf\xfd\xf5\xe7\x7f\xfd\xbd\x68\xc4\x5f\xfe\xf1\xe7\x5f\xfe\xf9\x97\xfd\x70\x77\x33\x6c\x08\x7e\x8f\x5e\x7d\xcd\x89\x5c\xc0\xcb\xaf\xfb\x2f\xea\x0f\x9d\xa6\x56\x41\xca\x7a\xc5\xdb\xf5\x80\x35\x55\x16\xce\x4b\x0b\xf5\x7a\x71\xc2\x02\x9c\xda\x2e\x8a\xda\x30\x63\xdd\xe3\x89\x0e\x2d\xf0\x9f\x76\xa1\xe1\x51\xdb\xcf\x24\xb9\x58\x01\xea\x29\xad\xf3\x63\x2d\x7a\x4e\xe7\xde\xed\x76\x7e\x75\x91\x66\xe6\x0e\xd8\x8d\x23\x37\xda\x48\x85\x94\x8d\x9c\xe6\x74\x60\x69\xb5\xe9\x2a\x5c\xb1\x94\xc7\xcc\xd0\x02\xfb\xd4\x65\x0b\x1c\xf6\xdd\xeb\xa3\xb2\x58\xfa\x03\xe7\xfd\xfe\xe0\xf8\x28\x29\x68\xc8\x76\xa7\x9b\x8c\x6a\xc4\x37\xf8\xc9\xf4\xb2\x94\x71\x31\x80\x28\x61\x4a\xa3\x19\x5a\x33\xef\xfe\xc6\x19\x3d\x9d\xf7\xff\xdf\x8b\xba\xf8\x37\x02\x78\xed\x90\xa4\x4a\x4d\x89\xd4\x39\x76\x6c\xbd\x27\xde\x54\x04\x79\xf9\x7c\xae\x3d\x9b\x89\x0a\x97\xa5\x50\x9f\xfd\x33\x19\x6f\xca\x0c\x9c\x2a\xef\x3a\xac\x1c\x39\x53\xc1\xc0\xb6\x71\xac\x15\x15\x07\x3e\xe4\xb8\xc7\xb3\xaa\x00\xbc\xdc\x0e\x79\x43\x28\x4c\x29\xe8\x10\x7a\x2c\x7e\xe2\x19\xb4\x3f\xd8\x78\x81\xc4\xc3\xab\x8d\x39\xdf\x84\x7a\xea\x82\x9a\x0f\x27\x53\xfb\x39\x4f\xad\x23\xc0\x4f\x6d\x62\x59\x96\xf2\xc8\x4d\xb7\xde\x07\xb6\x62\x3a\x52\x3c\xfb\x2f\xd5\x74\xad\xf3\xca\x60\xeb\x2c\x8c\xe5\x9d\xbb\xd1\x10\x8c\xb2\x58\x1b\x09\x53\x42\x43\x99\xa6\x72\x4d\xd8\xa8\x23\x14\x4c\x71\x99\x33\xcd\x5a\x38\x9b\x57\xa4\x99\xf6\xdb\x21\xf4\x35\x3c\x3c\xb8\x93\xea\xee\x4d\xd0\x74\x47\x52\xde\x73\x3c\x29\xdd\x73\xee\xa2\xc5\x3e\xef\x5b\xcc\x2f\x35\xda\x5f\x3d\xad\x53\xbc\x4f\x9b\xa6\x9b\x9d\xfb\x79\xff\x2c\x79\x28\xed\x3f\x64\x8a\xaf\x98\x41\x3f\x38\xe5\xda\x7b\xa6\x36\xae\x64\xcf\x4a\xf0\x6b\xc1\x25\x37\xdd\xd7\x52\x75\x6f\x98\xd6\x87\x31\xad\x85\xa7\x16\xd7\xc6\x16\x0a\xd4\x10\x5e\x9c\xf7\xf5\x91\x28\x67\x03\x14\xc4\xc1\x97\xc6\xf6\x0d\x23\x0e\x4f\xaf\x9a\x82\xb3\xbb\x21\xa9\x70\x29\x57\x08\xc7\xc1\xc9\x4b\xf4\x44\x51\x9e\x8c\x7d\xf9\xd0\x39\xee\xd1\x47\xd5\x8e\xee\x12\xcb\x3b\xd4\xfc\xb0\xb8\x4e\x01\xd6\xbf\x03\x00\x00\xff\xff\xd6\xf1\xfd\x84\xe3\x14\x00\x00")

func templateVarnishTplBytes() ([]byte, error) {
	return bindataRead(
		_templateVarnishTpl,
		"template/varnish.tpl",
	)
}

func templateVarnishTpl() (*asset, error) {
	bytes, err := templateVarnishTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/varnish.tpl", size: 5347, mode: os.FileMode(493), modTime: time.Unix(1487827231, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/backend.tpl": templateBackendTpl,
	"template/init.tpl": templateInitTpl,
	"template/varnish.tpl": templateVarnishTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"backend.tpl": &bintree{templateBackendTpl, map[string]*bintree{}},
		"init.tpl": &bintree{templateInitTpl, map[string]*bintree{}},
		"varnish.tpl": &bintree{templateVarnishTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

